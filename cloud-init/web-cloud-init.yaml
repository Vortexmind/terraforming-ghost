#cloud-config

package_update: true
package_upgrade: true
package_reboot_if_required: true

packages:
  - curl

write_files:
  - content: |
      version: '3.1'

      services:
      
        certbot:
            image: certbot/dns-cloudflare:latest
            volumes:
              - ${PWD}/cloudflare.ini:/opt/certbot/conf/cloudflare.ini:ro
              - certificates_data:/etc/letsencrypt
            command: "certonly
                      --non-interactive
                      --agree-tos
                      --no-eff-email
                      --preferred-challenges dns-01
                      --dns-cloudflare
                      --dns-cloudflare-credentials /opt/certbot/conf/cloudflare.ini
                      -d '*.${cloudflare_domain}'
                      --email ${certbot_email}"
      
        nginx:
          image: nginx:stable-alpine
          volumes:
            - ${PWD}/ghost.conf:/etc/nginx/conf.d/ghost.conf
            - ${PWD}/commento.conf:/etc/nginx/conf.d/commento.conf
            - ${PWD}/static.conf:/etc/nginx/conf.d/static.conf
            - ${PWD}/lets-encrypt-x3-cross-signed.pem:/etc/nginx/certs/lets-encrypt-x3-cross-signed.pem
            - ${PWD}/ssl-params.conf:/etc/nginx/snippets/ssl-params.conf
            - ${PWD}/nginx-entrypoint.sh:/nginx-entrypoint.sh
            - www_data:/var/www/html
            - certificates_data:/etc/letsencrypt:ro
          ports:
            - 443:443
          depends_on:
            - ghost
            - commento
            - certbot
          networks:
            - nginx
          entrypoint: /nginx-entrypoint.sh
          command: ["nginx", "-g", "daemon off;"]

        ghost:
          image: ghost:3-alpine
          volumes:
            - www_data:/var/www/html
          restart: always
          environment:
            # see https://docs.ghost.org/docs/config#section-running-ghost-with-config-env-variables
            database__client: mysql
            database__connection__host: db-mysql
            database__connection__user: ${mysql_user}
            database__connection__password: ${mysql_password}
            database__connection__database: ghost
            url: http://${ghost_blog_dns}
          depends_on:
            - db-mysql
          networks:
            - nginx
            - db_mysql
        
        commento:
          image: registry.gitlab.com/commento/commento:v1.8.0
          environment:
            COMMENTO_ORIGIN: http://${commento_dns}
            COMMENTO_PORT: 8080
            COMMENTO_POSTGRES: postgres://${postgres_user}:${postgres_password}@db-postgres:5432/commento?sslmode=disable
          depends_on:
            - db-postgres
          networks:
            - nginx
            - db_postgres
      
        db-mysql:
          image: mysql:5.7
          restart: always
          environment:
            MYSQL_ROOT_PASSWORD: ${mysql_password}
          volumes:
            - mysql_data:/var/lib/mysql
          networks:
            - db_mysql
      
        db-postgres:
          image: postgres:12-alpine
          environment:
            POSTGRES_DB: commento
            POSTGRES_USER: ${postgres_user}
            POSTGRES_PASSWORD: ${postgres_password}
          volumes:
            - postgres_data:/var/lib/postgresql/data
          networks:
            - nginx
            - db_postgres
      
      volumes:
        postgres_data:
      
        mysql_data:
      
        www_data:

        certificates_data:
      
      networks:
        db_postgres:
      
        db_mysql:
      
        nginx:
    path: /opt/scripts/docker-compose.yml
  - content: |
      server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name ${commento_dns};

        gzip off;

        ssl_certificate /etc/letsencrypt/live/${cloudflare_domain}/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/${cloudflare_domain}/privkey.pem;
        ssl_trusted_certificate /etc/nginx/certs/lets-encrypt-x3-cross-signed.pem;

        include /etc/nginx/snippets/ssl-params.conf;

        location / {
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Host $http_host;
            proxy_pass http://commento:8080;
            proxy_hide_header X-Powered-By;
        }

        location ~ /.well-known {
            allow all;
        }

        client_max_body_size 50m;

      }
    path: /opt/scripts/commento.conf
  - content: |
      server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name ${ghost_blog_dns};

        gzip off;

        ssl_certificate /etc/letsencrypt/live/${cloudflare_domain}/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/${cloudflare_domain}/privkey.pem;
        ssl_trusted_certificate /etc/nginx/certs/lets-encrypt-x3-cross-signed.pem;

        include /etc/nginx/snippets/ssl-params.conf;

        location / {
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Host $http_host;
            proxy_pass http://ghost:2368;
            proxy_hide_header X-Powered-By;
        }

        location ~ /.well-known {
            allow all;
        }

        client_max_body_size 50m;

      }
    path: /opt/scripts/ghost.conf
  - content: |
      server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name ${static_dns};

        gzip off;

        ssl_certificate /etc/letsencrypt/live/${cloudflare_domain}/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/${cloudflare_domain}/privkey.pem;
        ssl_trusted_certificate /etc/nginx/certs/lets-encrypt-x3-cross-signed.pem;

        include /etc/nginx/snippets/ssl-params.conf;

        client_max_body_size 50m;

        location / {
            root /var/www/html;
            autoindex off;
            sendfile on;
            sendfile_max_chunk 1m;
            tcp_nopush on;

            if ($request_method = 'OPTIONS') {
              add_header 'Access-Control-Allow-Origin' '*';
              add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
              #
              # Custom headers and headers various browsers *should* be OK with but aren't
              #
              add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
              #
              # Tell client that this pre-flight info is valid for 20 days
              #
              add_header 'Access-Control-Max-Age' 1728000;
              add_header 'Content-Type' 'text/plain; charset=utf-8';
              add_header 'Content-Length' 0;
              return 204;
            }

            add_header 'Access-Control-Allow-Origin' 'https://${ghost_blog_dns}';
            add_header 'Access-Control-Allow-Methods' 'GET';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';
            add_header 'Cache-Control' 'public, max-age=432000';

        }
      }
    path: /opt/scripts/static.conf
  - content: |
      # Cloudflare API credentials used by Certbot
      dns_cloudflare_email = ${cloudflare_email}
      dns_cloudflare_api_key = ${cloudflare_api_key}
    path: /opt/scripts/cloudflare.ini
  - content: |
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers off;
        ssl_ecdh_curve  X25519:P-256:P-384:P-224:P-521;
        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA2;
        ssl_session_cache shared:SSL:10m;
        ssl_buffer_size 4k;
        ssl_session_timeout 120m;
        ssl_session_tickets off; # Requires nginx >= 1.5.9
        ssl_stapling on; # Requires nginx >= 1.3.7
        ssl_stapling_verify on; # Requires nginx => 1.3.7
        resolver 1.1.1.1 1.0.0.1  valid=300s;
        resolver_timeout 5s;
    path: /opt/scripts/ssl-params.conf
  - content:  |
      -----BEGIN CERTIFICATE-----
      MIIEkjCCA3qgAwIBAgIQCgFBQgAAAVOFc2oLheynCDANBgkqhkiG9w0BAQsFADA/
      MSQwIgYDVQQKExtEaWdpdGFsIFNpZ25hdHVyZSBUcnVzdCBDby4xFzAVBgNVBAMT
      DkRTVCBSb290IENBIFgzMB4XDTE2MDMxNzE2NDA0NloXDTIxMDMxNzE2NDA0Nlow
      SjELMAkGA1UEBhMCVVMxFjAUBgNVBAoTDUxldCdzIEVuY3J5cHQxIzAhBgNVBAMT
      GkxldCdzIEVuY3J5cHQgQXV0aG9yaXR5IFgzMIIBIjANBgkqhkiG9w0BAQEFAAOC
      AQ8AMIIBCgKCAQEAnNMM8FrlLke3cl03g7NoYzDq1zUmGSXhvb418XCSL7e4S0EF
      q6meNQhY7LEqxGiHC6PjdeTm86dicbp5gWAf15Gan/PQeGdxyGkOlZHP/uaZ6WA8
      SMx+yk13EiSdRxta67nsHjcAHJyse6cF6s5K671B5TaYucv9bTyWaN8jKkKQDIZ0
      Z8h/pZq4UmEUEz9l6YKHy9v6Dlb2honzhT+Xhq+w3Brvaw2VFn3EK6BlspkENnWA
      a6xK8xuQSXgvopZPKiAlKQTGdMDQMc2PMTiVFrqoM7hD8bEfwzB/onkxEz0tNvjj
      /PIzark5McWvxI0NHWQWM6r6hCm21AvA2H3DkwIDAQABo4IBfTCCAXkwEgYDVR0T
      AQH/BAgwBgEB/wIBADAOBgNVHQ8BAf8EBAMCAYYwfwYIKwYBBQUHAQEEczBxMDIG
      CCsGAQUFBzABhiZodHRwOi8vaXNyZy50cnVzdGlkLm9jc3AuaWRlbnRydXN0LmNv
      bTA7BggrBgEFBQcwAoYvaHR0cDovL2FwcHMuaWRlbnRydXN0LmNvbS9yb290cy9k
      c3Ryb290Y2F4My5wN2MwHwYDVR0jBBgwFoAUxKexpHsscfrb4UuQdf/EFWCFiRAw
      VAYDVR0gBE0wSzAIBgZngQwBAgEwPwYLKwYBBAGC3xMBAQEwMDAuBggrBgEFBQcC
      ARYiaHR0cDovL2Nwcy5yb290LXgxLmxldHNlbmNyeXB0Lm9yZzA8BgNVHR8ENTAz
      MDGgL6AthitodHRwOi8vY3JsLmlkZW50cnVzdC5jb20vRFNUUk9PVENBWDNDUkwu
      Y3JsMB0GA1UdDgQWBBSoSmpjBH3duubRObemRWXv86jsoTANBgkqhkiG9w0BAQsF
      AAOCAQEA3TPXEfNjWDjdGBX7CVW+dla5cEilaUcne8IkCJLxWh9KEik3JHRRHGJo
      uM2VcGfl96S8TihRzZvoroed6ti6WqEBmtzw3Wodatg+VyOeph4EYpr/1wXKtx8/
      wApIvJSwtmVi4MFU5aMqrSDE6ea73Mj2tcMyo5jMd6jmeWUHK8so/joWUoHOUgwu
      X4Po1QYz+3dszkDqMp4fklxBwXRsW10KXzPMTZ+sOPAveyxindmjkW8lGy+QsRlG
      PfZ+G6Z6h7mjem0Y+iWlkYcV4PIWL1iwBi8saCbGS5jN2p8M+X+Q7UNKEkROb3N6
      KOqkqm57TH2H3eDJAkSnh6/DNFu0Qg==
      -----END CERTIFICATE-----
    path: /opt/scripts/lets-encrypt-x3-cross-signed.pem
  - content: |
      #!/bin/sh
      # vim:sw=4:ts=4:et

      set -e
      
      # We wait for certbot to have issued the certificates before starting up
      while (! test -f "/etc/letsencrypt/live/${cloudflare_domain}/fullchain.pem") || (! test -f "/etc/letsencrypt/live/${cloudflare_domain}/privkey.pem"); do
        sleep 5
        echo "Waiting for certs..."
      done

      # See https://github.com/nginxinc/docker-nginx/blob/master/mainline/alpine/docker-entrypoint.sh
      if [ -z "$${NGINX_ENTRYPOINT_QUIET_LOGS:-}" ]; then
          exec 3>&1
      else
          exec 3>/dev/null
      fi

      if [ "$1" = "nginx" -o "$1" = "nginx-debug" ]; then
          if /usr/bin/find "/docker-entrypoint.d/" -mindepth 1 -maxdepth 1 -type f -print -quit 2>/dev/null | read v; then
              echo >&3 "$0: /docker-entrypoint.d/ is not empty, will attempt to perform configuration"

              echo >&3 "$0: Looking for shell scripts in /docker-entrypoint.d/"
              find "/docker-entrypoint.d/" -follow -type f -print | sort -n | while read -r f; do
                  case "$f" in
                      *.sh)
                          if [ -x "$f" ]; then
                              echo >&3 "$0: Launching $f";
                              "$f"
                          else
                              # warn on shell scripts without exec bit
                              echo >&3 "$0: Ignoring $f, not executable";
                          fi
                          ;;
                      *) echo >&3 "$0: Ignoring $f";;
                  esac
              done

              echo >&3 "$0: Configuration complete; ready for start up"
          else
              echo >&3 "$0: No files found in /docker-entrypoint.d/, skipping configuration"
          fi
      fi

      exec "$@"
    path: /opt/scripts/nginx-entrypoint.sh

runcmd:
- chmod +x /opt/scripts/nginx-entrypoint.sh
- docker pull registry.gitlab.com/commento/commento:v1.8.0
- cd /opt/scripts
- docker-compose up -d
